import { D1Database } from "@cloudflare/workers-types/experimental/index.js";
import {
  HttpResult,
  Either,
  ModelMethod,
  left,
  CidlType,
  right,
  CloesceAst,
  isNullableType,
  Model,
  getNavigationPropertyCidlType,
  CidlIncludeTree,
} from "../common.js";
import { IncludeTree } from "../index.js";

// Requires the rust runtime binary to have been built
import mod from "../../dist/runtime.wasm";

/**
 * Map of model names to their respective constructor.
 *
 * The value accepted into the `cloesce` function is generated by the Cloesce compiler, and
 * is guaranteed to contain all model definitions.
 */
type ModelConstructorRegistry = Record<string, new () => UserDefinedModel>;

/**
 * Dependency injection container, mapping an object type name to an instance of that object.
 *
 * The value accepted into the `cloesce` function is generated by the Cloesce compiler, and is
 * guaranteed to contain all injected model method parameters.
 */
type InstanceRegistry = Map<string, any>;

/**
 * Users will create Cloesce models, which have metadata for them in the ast.
 * For TypeScript's purposes, these models can be anything. We can assume any
 * `UserDefinedModel` has been verified by the compiler.
 */
type UserDefinedModel = any;

/**
 * Given a request, this represents a map of each body / url  param name to
 * its actual value. Unknown, as the a request can be anything.
 */
type RequestParamMap = Record<string, unknown>;

/**
 * Meta information on the wrangler env and db bindings
 */
interface MetaWranglerEnv {
  envName: string;
  dbName: string; // TODO: support many db's
}

/**
 * WASM ABI
 */
interface RuntimeWasmExports {
  memory: WebAssembly.Memory;
  get_return_len(): number;
  set_meta_ptr(ptr: number, len: number): number;
  alloc(len: number): number;
  dealloc(ptr: number, len: number): void;
  object_relational_mapping(
    model_name_ptr: number,
    model_name_len: number,
    sql_rows_ptr: number,
    sql_rows_len: number,
    include_tree_ptr: number,
    include_tree_len: number,
  ): number;
}

/**
 * Copies a value from TS memory to WASM memory. A subsequent `dealloc` is necessary.
 */
function copyToWasm(
  str: string,
  wasm: RuntimeWasmExports,
): { ptr: number; len: number } {
  const encoder = new TextEncoder();
  const bytes = encoder.encode(str);
  const ptr = wasm.alloc(bytes.length);
  const mem = new Uint8Array(wasm.memory.buffer, ptr, bytes.length);
  mem.set(bytes);
  return { ptr, len: bytes.length };
}

type WasmInstance = WebAssembly.Instance & {
  exports: RuntimeWasmExports;
};

/**
 * Singleton instances of the cidl, constructor registry, and wasm binary.
 * These values are guaranteed to never change throughout a program lifetime.
 */
class RuntimeContainer {
  private static instance: RuntimeContainer | undefined;
  private constructor(
    public readonly ast: CloesceAst,
    public readonly constructorRegistry: ModelConstructorRegistry,
    public readonly wasm: RuntimeWasmExports,
  ) {}

  static async init(
    ast: CloesceAst,
    constructorRegistry: ModelConstructorRegistry,
    wasm?: WebAssembly.Instance,
  ) {
    if (!this.instance) {
      const wasmInstance = (wasm ??
        (await WebAssembly.instantiate(mod))) as WasmInstance;

      const { ptr, len } = copyToWasm(
        JSON.stringify(ast.models),
        wasmInstance.exports,
      );
      if (wasmInstance.exports.set_meta_ptr(ptr, len) != 0) {
        throw Error("The WASM Module failed to load due to an invalid CIDL");
      }

      this.instance = new RuntimeContainer(
        ast,
        constructorRegistry,
        wasmInstance.exports,
      );
    }
  }

  static get(): RuntimeContainer {
    return this.instance!;
  }
}

/**
 * Runtime entry point. Given a request, undergoes: routing, validating,
 * hydrating, and method dispatch.
 *
 * @returns A Response with an `HttpResult` JSON body.
 */
export async function cloesce(
  request: Request,
  ast: CloesceAst,
  constructorRegistry: ModelConstructorRegistry,
  instanceRegistry: InstanceRegistry,
  envMeta: MetaWranglerEnv,
  api_route: string,
): Promise<Response> {
  await RuntimeContainer.init(ast, constructorRegistry);
  const d1: D1Database = instanceRegistry.get(envMeta.envName)[envMeta.dbName];

  // Match the route to a model method
  const route = matchRoute(request, ast, api_route);
  if (!route.ok) {
    return toResponse(route.value);
  }
  const { method, model, id } = route.value;

  // Validate request body to the model method
  const validation = await validateRequest(request, ast, model, method, id);
  if (!validation.ok) {
    return toResponse(validation.value);
  }
  const [params, dataSource] = validation.value;

  // Instantatiate the model
  let instance: object;
  if (method.is_static) {
    instance = constructorRegistry[model.name];
  } else {
    const hydratedModel = await hydrateModel(
      constructorRegistry,
      d1,
      model,
      id!,
      dataSource,
    );

    if (!hydratedModel.ok) {
      return toResponse(hydratedModel.value);
    }

    instance = hydratedModel.value;
  }

  // Dispatch a method on the model and return the result
  return toResponse(
    await methodDispatch(instance, instanceRegistry, envMeta, method, params),
  );
}

/**
 * Matches a request to a method on a model.
 * @param api_route The route from the domain to the actual API, ie https://foo.com/route/to/api => route/to/api/
 * @returns 404 or a `MatchedRoute`
 */
function matchRoute(
  request: Request,
  ast: CloesceAst,
  api_route: string,
): Either<
  HttpResult,
  {
    model: Model;
    method: ModelMethod;
    id: string | null;
  }
> {
  const url = new URL(request.url);

  const notFound = (e: string) =>
    left(errorState(404, `Path not found: ${e} ${url.pathname}`));

  const routeParts = url.pathname
    .slice(api_route.length)
    .split("/")
    .filter(Boolean);

  if (routeParts.length < 2) {
    return notFound("Expected /model/method or /model/:id/method");
  }

  // Attempt to extract from routeParts
  const modelName = routeParts[0];
  const methodName = routeParts[routeParts.length - 1];
  const id = routeParts.length === 3 ? routeParts[1] : null;

  const model = ast.models[modelName];
  if (!model) {
    return notFound(`Unknown model ${modelName}`);
  }

  const method = model.methods[methodName];
  if (!method) {
    return notFound(`Unknown method ${modelName}.${methodName}`);
  }

  if (request.method !== method.http_verb) {
    return notFound("Unmatched HTTP method");
  }

  return right({
    model,
    method,
    id,
  });
}

/**
 * Validates the request's body/search params against a ModelMethod
 * @returns 400 or a `RequestParamMap` consisting of each parameters name mapped to its value, and
 * a data source
 */
async function validateRequest(
  request: Request,
  ast: CloesceAst,
  model: Model,
  method: ModelMethod,
  id: string | null,
): Promise<Either<HttpResult, [RequestParamMap, string | null]>> {
  // Error state: any missing parameter, body, or malformed input will exit with 400.
  const invalidRequest = (e: string) =>
    left(errorState(400, `Invalid Request Body: ${e}`));

  if (!method.is_static && id == null) {
    return invalidRequest("Id's are required for instantiated methods.");
  }

  // Filter out any injected parameters that will not be passed
  // by the query.
  const requiredParams = method.parameters.filter(
    (p) =>
      !(
        typeof p.cidl_type === "object" &&
        p.cidl_type !== null &&
        "Inject" in p.cidl_type
      ),
  );

  // Extract data source
  const url = new URL(request.url);
  let dataSource = url.searchParams.get("dataSource");

  // Extract url or body parameters
  let requestBodyMap: RequestParamMap;
  if (method.http_verb === "GET") {
    requestBodyMap = Object.fromEntries(url.searchParams.entries());
  } else {
    try {
      requestBodyMap = await request.json();
    } catch {
      return invalidRequest("Could not retrieve JSON body.");
    }
  }

  // Validate data source if exists
  if (dataSource && !(dataSource in model.data_sources)) {
    return invalidRequest(`Unknown data source ${dataSource}`);
  }

  // Ensure all required params exist
  if (!requiredParams.every((p) => p.name in requestBodyMap)) {
    return invalidRequest(`Missing parameters.`);
  }

  // Validate all parameters type
  for (const p of requiredParams) {
    const value = requestBodyMap[p.name];
    if (!validateCidlType(ast, value, p.cidl_type)) {
      return invalidRequest("Invalid parameters.");
    }
  }

  return right([requestBodyMap, dataSource]);
}

/**
 * Queries D1 for a particular model's ID, then transforms the SQL column output into
 * an instance of a model using the provided include tree and metadata as a guide.
 * @returns 404 if no record was found for the provided ID
 * @returns 500 if the D1 database is not synced with Cloesce and yields an error
 * @returns The instantiated model on success
 */
async function hydrateModel(
  constructorRegistry: ModelConstructorRegistry,
  d1: D1Database,
  model: Model,
  id: string,
  dataSource: string | null,
): Promise<Either<HttpResult, object>> {
  // Error state: If the D1 database has been tweaked outside of Cloesce
  // resulting in a malformed query, exit with a 500.
  const malformedQuery = (e: any) =>
    left(
      errorState(
        500,
        `Error in hydration query, is the database out of sync with the backend?: ${e instanceof Error ? e.message : String(e)}`,
      ),
    );

  // Error state: If no record is found for the id, return a 404
  const missingRecord = left(errorState(404, "Record not found"));

  const pk = model.primary_key.name;
  const query =
    dataSource !== null
      ? `SELECT * FROM "${model.name}.${dataSource}" WHERE "${model.name}.${pk}" = ?`
      : `SELECT * FROM "${model.name}" WHERE "${pk}" = ?`;

  // Query DB
  let records;
  try {
    records = await d1.prepare(query).bind(id).run();
    if (!records) {
      return missingRecord;
    }
    if (records.error) {
      return malformedQuery(records.error);
    }
  } catch (e) {
    return malformedQuery(e);
  }

  // Get include tree
  const includeTree: CidlIncludeTree =
    dataSource !== null ? model.data_sources[dataSource].tree : {};

  // Hydrate
  const models: object[] = modelsFromSql(
    constructorRegistry[model.name],
    records.results,
    includeTree,
  );

  return right(models[0]);
}

/**
 * Calls a method on a model given a list of parameters.
 * @returns 500 on an uncaught client error, 200 with a result body on success
 */
async function methodDispatch(
  instance: object,
  instanceRegistry: InstanceRegistry,
  envMeta: MetaWranglerEnv,
  method: ModelMethod,
  params: Record<string, unknown>,
): Promise<HttpResult<unknown>> {
  // Error state: Client code ran into an uncaught exception.
  const uncaughtException = (e: any) =>
    errorState(
      500,
      `Uncaught exception in method dispatch: ${e instanceof Error ? e.message : String(e)}`,
    );

  // For now, the only injected dependency is the wrangler env,
  // so we will assume that is what this is
  const paramArray = method.parameters.map((p) =>
    params[p.name] == undefined
      ? instanceRegistry.get(envMeta.envName)
      : params[p.name],
  );

  // Ensure the result is always some HttpResult
  const resultWrapper = (res: any): HttpResult<unknown> => {
    const rt = method.return_type;

    if (rt === null) {
      return { ok: true, status: 200 };
    }

    if (typeof rt === "object" && rt !== null && "HttpResult" in rt) {
      return res as HttpResult<unknown>;
    }

    return { ok: true, status: 200, data: res };
  };

  try {
    return resultWrapper(await (instance as any)[method.name](...paramArray));
  } catch (e) {
    return uncaughtException(e);
  }
}

function validateCidlType(
  ast: CloesceAst,
  value: unknown,
  cidlType: CidlType,
): boolean {
  if (value === undefined) return false;

  // TODO: consequences of null checking like this? 'null' is passed in
  // as a string for GET requests...
  const nullable = isNullableType(cidlType);
  if (value == null || value === "null") return nullable;

  if (nullable) {
    cidlType = (cidlType as any).Nullable; // Unwrap the nullable type
  }

  // Handle primitive string types with switch
  if (typeof cidlType === "string") {
    switch (cidlType) {
      case "Integer":
        return Number.isInteger(Number(value));
      case "Real":
        return !Number.isNaN(Number(value));
      case "Text":
        return typeof value === "string";
      case "Blob":
        return value instanceof Blob || value instanceof ArrayBuffer;
      default:
        return false;
    }
  }

  // Handle Models
  if ("Object" in cidlType && ast.models[cidlType.Object]) {
    const model = ast.models[cidlType.Object];
    if (!model || typeof value !== "object") return false;
    const valueObj = value as Record<string, unknown>;

    // Validate attributes
    if (
      !model.attributes.every((attr) =>
        validateCidlType(ast, valueObj[attr.value.name], attr.value.cidl_type),
      )
    ) {
      return false;
    }

    // Validate navigation properties
    return model.navigation_properties.every((nav) => {
      const navValue = valueObj[nav.var_name];

      return (
        navValue == null ||
        validateCidlType(ast, navValue, getNavigationPropertyCidlType(nav))
      );
    });
  }

  // Handle Plain Old Objects
  if ("Object" in cidlType && ast.poos[cidlType.Object]) {
    const poo = ast.poos[cidlType.Object];
    if (!poo || typeof value !== "object") return false;
    const valueObj = value as Record<string, unknown>;

    // Validate attributes
    if (
      !poo.attributes.every((attr) =>
        validateCidlType(ast, valueObj[attr.name], attr.cidl_type),
      )
    ) {
      return false;
    }
  }

  if ("Array" in cidlType) {
    const arr = cidlType.Array;
    return (
      Array.isArray(value) && value.every((v) => validateCidlType(ast, v, arr))
    );
  }

  if ("HttpResult" in cidlType) {
    if (value === null) return cidlType.HttpResult === null;
    if (cidlType.HttpResult === null) return false;
    return validateCidlType(ast, value, cidlType.HttpResult);
  }

  return false;
}

/**
 * Creates model instances given a properly formatted SQL record, being either:
 *
 *  1. Flat, relationship-less (ex: id, name, location, ...)
 *  2. `DataSource` formatted (ex: Horse.id, Horse.name, Horse.rider, ...)
 *
 * @param ctor The type of the model
 * @param records SQL records
 * @param includeTree The include tree to use when parsing the records
 * @returns An instantiated array of `T`, containing one or more objects.
 */
export function modelsFromSql<T extends object>(
  ctor: new () => T,
  records: Record<string, any>[],
  includeTree: IncludeTree<T> | null,
): T[] {
  const { ast, constructorRegistry, wasm } = RuntimeContainer.get();

  const modelName = copyToWasm(ctor.name, wasm);
  const rows = copyToWasm(JSON.stringify(records), wasm);
  const includeTreeJson = copyToWasm(JSON.stringify(includeTree), wasm);

  // Invoke the ORM
  let resPtr: number;
  try {
    resPtr = wasm.object_relational_mapping(
      modelName.ptr,
      modelName.len,
      rows.ptr,
      rows.len,
      includeTreeJson.ptr,
      includeTreeJson.len,
    );
  } finally {
    wasm.dealloc(modelName.ptr, modelName.len);
    wasm.dealloc(rows.ptr, rows.len);
    wasm.dealloc(includeTreeJson.ptr, includeTreeJson.len);
  }

  // Parse the results as JSON
  const resLen = wasm.get_return_len();
  const jsonResults: any[] = JSON.parse(
    new TextDecoder().decode(
      new Uint8Array(wasm.memory.buffer, resPtr, resLen),
    ),
  );

  // The result that comes back is just JSON, run a DFS on each navigation property
  // in the include tree provided, instantiating each object via constructor registry.
  function instantiateDfs(
    m: any,
    meta: Model,
    includeTree: IncludeTree<any> | null,
  ) {
    m = Object.assign(new constructorRegistry[meta.name](), m);

    if (!includeTree) {
      return m;
    }

    for (const navProp of meta.navigation_properties) {
      const nestedIncludeTree = includeTree[navProp.var_name];
      if (!nestedIncludeTree) continue;

      const nestedMeta = ast.models[navProp.model_name];
      const value = m[navProp.var_name];

      // One to Many, Many to Many
      if (Array.isArray(value)) {
        m[navProp.var_name] = value.map((child: any) =>
          instantiateDfs(child, nestedMeta, nestedIncludeTree),
        );
      }
      // One to one
      else if (value) {
        m[navProp.var_name] = instantiateDfs(
          value,
          nestedMeta,
          nestedIncludeTree,
        );
      }
    }

    return m;
  }

  return jsonResults.map((obj: any) =>
    instantiateDfs(obj, ast.models[ctor.name], includeTree),
  ) as T[];
}

function errorState(status: number, message: string): HttpResult {
  return { ok: false, status, message };
}

function toResponse(r: HttpResult): Response {
  return new Response(JSON.stringify(r), {
    status: r.status,
    headers: { "Content-Type": "application/json" },
  });
}

/**
 * For testing purposes
 */
export const _cloesceInternal = {
  matchRoute,
  validateRequest,
  methodDispatch,
  RuntimeContainer,
};
