import { HttpResult, instantiateObjectArray, DeepPartial } from "cloesce/client";

{{#each poos}}
export class {{this.name}} {
  {{#each this.attributes}}
  {{name}}: {{get_cidl_type cidl_type}};
  {{/each}}
}
{{/each}}

{{#each models}}
export class {{this.name}} {
  {{this.primary_key.name}}: {{get_cidl_type this.primary_key.cidl_type}};
  {{#each this.attributes}}
  {{value.name}}: {{get_cidl_type value.cidl_type}};
  {{/each}}
  {{#each this.navigation_properties}}
  {{var_name}}: {{get_nav_cidl_type this}}{{#if (is_one_to_one this)}} | undefined{{/if}};
  {{/each}}

  {{#each this.methods}}
  {{#if this.is_static}}static {{/if}}async {{this.name}}(
    {{#each this.parameters}}
      {{#if (is_serializable cidl_type)}}
        {{name}}: {{get_cidl_type cidl_type ../../this}},
      {{/if}}
    {{/each}}
  ): Promise<HttpResult<{{get_cidl_type this.return_type}}>> {
    const baseUrl = new URL(`{{../../domain}}/{{#if this.is_static}}{{../name}}/{{this.name}}{{else}}{{../name}}/${this.{{../primary_key.name}}}/{{this.name}}{{/if}}`);
    {{#if (eq this.http_verb "GET")}}
      {{#each this.parameters}}
        {{#if (is_serializable cidl_type)}}
    baseUrl.searchParams.append('{{name}}', String({{name}}));
        {{/if}}
      {{/each}}
    const res = await fetch(baseUrl, { method: "GET" });
    {{else}}
    const res = await fetch(baseUrl, {
      method: "{{this.http_verb}}",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        {{#each this.parameters}}
          {{#if (is_serializable cidl_type)}}
            {{name}}{{#unless @last}}, {{/unless}}
          {{/if}}
        {{/each}}
      })
    });
    {{/if}}
    let raw = await res.json();
    if (!res.ok) {
      return raw;
    }
    {{#if (eq (get_cidl_type this.return_type) "void")}}
    return raw;
    {{else if (is_object_array this.return_type)}}
    raw.data = instantiateObjectArray(raw.data, {{object_name this.return_type}});
    return raw;
    {{else if (is_object this.return_type)}}
    raw.data = Object.assign(new {{object_name this.return_type}}(), raw.data);
    return raw;
    {{else}}
    return raw;
    {{/if}}
  }
  {{/each}}
}
{{/each}}
