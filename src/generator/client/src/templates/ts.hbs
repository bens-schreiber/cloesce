import { Result } from "cloesce";

function instantiateModelArray<T extends object>(
  data: any,
  ctor: { new (): T }
): T[] {
  if (Array.isArray(data)) {
    return data.map((x) => instantiateModelArray(x, ctor)).flat();
  }
  return [Object.assign(new ctor(), data)];
}


{{#each models}}
export class {{name}} {
  {{#each attributes}}
  {{value.name}}: {{lang_type value.cidl_type value.nullable}};
  {{/each}}
  {{#each navigation_properties}}
  {{value.name}}: {{lang_type value.cidl_type value.nullable}}{{#if (is_model_array value.cidl_type)}} = []{{/if}};
  {{/each}}


  {{#each methods}}
  {{#if is_static}}static {{/if}}async {{name}}(
    {{#each parameters}}
      {{#if (is_serializable cidl_type)}}
        {{name}}: {{lang_type cidl_type nullable}}{{#unless @last}}, {{/unless}}
      {{/if}}
    {{/each}}
  ): Promise<Result<{{lang_type return_type}}>> {
    const baseUrl = `{{../../domain}}/{{#if is_static}}{{../name}}/{{name}}{{else}}{{../name}}/${this.id}/{{name}}{{/if}}`;

    {{#if (eq http_verb "GET")}}
    const url = new URL(baseUrl);
    {{#each parameters}}
    {{#if (is_serializable cidl_type)}}
    url.searchParams.append('{{name}}', String({{name}}));
    {{/if}}
    {{/each}}
    const res = await fetch(url.toString(), {
      method: "GET"
    });
    {{else}}
    const res = await fetch(baseUrl, {
      method: "{{http_verb}}",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        {{#each parameters}}
          {{#if (is_serializable cidl_type)}}
            {{name}}{{#unless @last}}, {{/unless}}
          {{/if}}
        {{/each}}
      })
    });
    {{/if}}

    if (!res.ok) {
      const data = await res.json();
      return data;
    }

    let raw = await res.json();
    if (!raw.ok) {
      return raw;
    }

    {{#if (eq (lang_type return_type) "void")}}
    return raw;
    {{else}}
      {{#if (is_model_array return_type)}}
    raw.data = instantiateModelArray(raw.data, {{../name}})
    return raw;
      {{else}}
        {{#if (is_model return_type)}}
    raw.data = Object.assign(new {{../name}}(), raw.data)
    return raw;
        {{else}}
    return raw;
        {{/if}}
      {{/if}}
    {{/if}}

  }
  {{/each}}
}
{{/each}}