type Ok<T> = { ok: true; data: T };
type Err = { ok: false; status: number; message: string };
type Result<T> = Ok<T> | Err;

{{#each models}}
export class {{name}} {
  {{#each attributes}}
  {{value.name}}: {{lang_type value.cidl_type value.nullable}};
  {{/each}}

  {{#each methods}}
  {{#if is_static}}static {{/if}}async {{name}}(
    {{#each parameters}}
      {{#if (is_serializable cidl_type)}}
        {{name}}: {{lang_type cidl_type nullable}}{{#unless @last}}, {{/unless}}
      {{/if}}
    {{/each}}
  ): Promise<Result<string>> {
    const url = `http://{{../../domain}}{{#if is_static}}/api/{{../name}}/{{name}}{{else}}/api/{{../name}}/${this.id}/{{name}}{{/if}}`;

    const res = await fetch(url, {
      method: "{{http_verb}}",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        {{#each parameters}}
          {{#if (is_serializable cidl_type)}}
            {{name}}{{#unless @last}}, {{/unless}}
          {{/if}}
        {{/each}}
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
  {{/each}}
}
{{/each}}
