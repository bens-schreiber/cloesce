---
source: client/tests/client_tests.rs
expression: client
---
type Ok<T> = { ok: true; data: T };
type Err = { ok: false; status: number; message: string };
type Result<T> = Ok<T> | Err;

function instantiateModelArray<T>(data: any, ctor: { new(): T }): T[] {
  if (Array.isArray(data)) {
    return data.map(x => instantiateModelArray(x, ctor)).flat();
  }
  return [Object.assign(new ctor(), data)];
}

export class ExampleModel {
  id: number;
  rating: number;
  description: string | null;
  data_blob: Uint8Array;

  static async create_example(
        payload: ExampleModel
  ): Promise<Result<ExampleModel>> {
    const url = `http://localhost:1000/api/ExampleModel/create_example`;
    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            payload
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    const instantiated = Object.assign(new ExampleModel(), data);
    return { ok: true, data: instantiated };
  }

  static async read_example(
        id: number | null
  ): Promise<Result<string[]>> {
    const url = `http://localhost:1000/api/ExampleModel/read_example`;
    const res = await fetch(url, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            id
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }

  static async list_examples(
  ): Promise<Result<ExampleModel[]>> {
    const url = `http://localhost:1000/api/ExampleModel/list_examples`;
    const res = await fetch(url, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    const instantiated = instantiateModelArray(data, ExampleModel);
    return { ok: true, data: instantiated };
  }

  static async update_example(
        id: number, 
        rating: number | null
  ): Promise<Result<number>> {
    const url = `http://localhost:1000/api/ExampleModel/update_example`;
    const res = await fetch(url, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            id, 
            rating
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }

  static async patch_example(
        description: string | null
  ): Promise<Result<number>> {
    const url = `http://localhost:1000/api/ExampleModel/patch_example`;
    const res = await fetch(url, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            description
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }

  static async delete_example(
        id: number
  ): Promise<Result<Uint8Array>> {
    const url = `http://localhost:1000/api/ExampleModel/delete_example`;
    const res = await fetch(url, {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            id
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }

  async get_description(
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/ExampleModel/${this.id}/get_description`;
    const res = await fetch(url, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }

  async increment_rating(
        amount: number
  ): Promise<Result<number>> {
    const url = `http://localhost:1000/api/ExampleModel/${this.id}/increment_rating`;
    const res = await fetch(url, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            amount
      })
    });
    if (!res.ok) {
      const message = await res.text();
      return {
        ok: false,
        status: res.status,
        message
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }


}
