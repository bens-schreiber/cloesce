---
source: client/tests/client_tests.rs
expression: client
---
import { Result } from "cloesce";

function instantiateModelArray<T extends object>(
  data: any,
  ctor: { new (): T }
): T[] {
  if (Array.isArray(data)) {
    return data.map((x) => instantiateModelArray(x, ctor)).flat();
  }
  return [Object.assign(new ctor(), data)];
}


export class Horse {
  id: number;
  name: string;
  bio: string | null;
  likes: Like[];

  static async post(
        horse: Horse
  ): Promise<Result<Horse>> {
    const baseUrl = `http://localhost:1000/api/Horse/post`;

    const res = await fetch(baseUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            horse
      })
    });

    if (!res.ok) {
      const data = await res.json();
      return data;
    }

    let raw = await res.json();
    if (!raw.ok) {
      return raw;
    }

    raw.data = Object.assign(new Horse(), raw.data)
    return raw;

  }
  static async get(
        id: number
  ): Promise<Result<Horse>> {
    const baseUrl = `http://localhost:1000/api/Horse/get`;

    const url = new URL(baseUrl);
    url.searchParams.append('id', String(id));
    const res = await fetch(url.toString(), {
      method: "GET"
    });

    if (!res.ok) {
      const data = await res.json();
      return data;
    }

    let raw = await res.json();
    if (!raw.ok) {
      return raw;
    }

    raw.data = Object.assign(new Horse(), raw.data)
    return raw;

  }
  static async list(
  ): Promise<Result<Horse[]>> {
    const baseUrl = `http://localhost:1000/api/Horse/list`;

    const url = new URL(baseUrl);
    const res = await fetch(url.toString(), {
      method: "GET"
    });

    if (!res.ok) {
      const data = await res.json();
      return data;
    }

    let raw = await res.json();
    if (!raw.ok) {
      return raw;
    }

    raw.data = instantiateModelArray(raw.data, Horse)
    return raw;

  }
  async patch(
        horse: Horse
  ): Promise<Result<void>> {
    const baseUrl = `http://localhost:1000/api/Horse/${this.id}/patch`;

    const res = await fetch(baseUrl, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            horse
      })
    });

    if (!res.ok) {
      const data = await res.json();
      return data;
    }

    let raw = await res.json();
    if (!raw.ok) {
      return raw;
    }

    return raw;

  }
  async like(
        horse: Horse
  ): Promise<Result<void>> {
    const baseUrl = `http://localhost:1000/api/Horse/${this.id}/like`;

    const res = await fetch(baseUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            horse
      })
    });

    if (!res.ok) {
      const data = await res.json();
      return data;
    }

    let raw = await res.json();
    if (!raw.ok) {
      return raw;
    }

    return raw;

  }
  static async divide(
        a: number, 
        b: number
  ): Promise<Result<number>> {
    const baseUrl = `http://localhost:1000/api/Horse/divide`;

    const url = new URL(baseUrl);
    url.searchParams.append('a', String(a));
    url.searchParams.append('b', String(b));
    const res = await fetch(url.toString(), {
      method: "GET"
    });

    if (!res.ok) {
      const data = await res.json();
      return data;
    }

    let raw = await res.json();
    if (!raw.ok) {
      return raw;
    }

    return raw;

  }
}
export class Like {
  id: number;
  horseId1: number;
  horseId2: number;
  horse2: Horse;

}
