---
source: client/tests/client_tests.rs
expression: client
---
type Ok<T> = { ok: true; data: T };
type Err = { ok: false; status: number; message: string };
type Result<T> = Ok<T> | Err;

export class Actions {
  id: number;
  name: string;

  static async create(
        payload: string
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Actions/create`;

    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            payload
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
  static async update(
        id: number, 
        payload: string | null
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Actions/update`;

    const res = await fetch(url, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            id, 
            payload
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
  static async patch(
        phrase: string
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Actions/patch`;

    const res = await fetch(url, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            phrase
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
  static async remove(
        id: number
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Actions/remove`;

    const res = await fetch(url, {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            id
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
}
export class Dog {
  id: number;
  name: string;
  breed: number;
  preferred_treat: string | null;

  async get_name(
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Dog/${this.id}/get_name`;

    const res = await fetch(url, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
  async get_breed(
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Dog/${this.id}/get_breed`;

    const res = await fetch(url, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
  static async woof(
        phrase: string
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Dog/woof`;

    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            phrase
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
}
export class Person {
  id: number;
  name: string;
  middle_name: string | null;

  async foo(
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Person/${this.id}/foo`;

    const res = await fetch(url, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
  static async speak(
        phrase: string
  ): Promise<Result<string>> {
    const url = `http://localhost:1000/api/Person/speak`;

    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
            phrase
      })
    });

    if (!res.ok) {
      const data = await res.text();
      return {
        ok: false,
        status: res.status,
        message: data
      };
    }

    const data = await res.json();
    return { ok: true, data };
  }
}
