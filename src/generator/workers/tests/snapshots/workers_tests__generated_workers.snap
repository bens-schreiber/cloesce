---
source: workers/tests/workers_tests.rs
expression: workers
---
 
        import { D1Database } from "@cloudflare/workers-types"
import { mapSql, match, Result } from "cloesce"
import { ExampleModel } from './model/example_model';
        
        export interface Env {
            DB: D1Database;
        }
        
        
            const $: any = {};

            
                $.ExampleModel = {
                    validate(obj: any): boolean {
                        if (obj.id == null || typeof obj.id !== "number") {return false;}
if (obj.rating == null || typeof obj.rating !== "number") {return false;}
if (obj.description == undefined || typeof obj.description !== "string") {return false;}
if (obj.data_blob == null || !(obj.data_blob instanceof ArrayBuffer || obj.data_blob instanceof Uint8Array)) {return false;}
                        
                        return true;
                    }
                };
            
        
        const router = {"foo/api": {ExampleModel: {"<id>": {get_description: async (id: number, request: Request, env: Env) => {
                
                if (request.method !== "GET") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                
                const d1 = env.DB;
                const query = "SELECT * FROM ExampleModel WHERE id = ?";
                let record;
                try {
                    record = await d1.prepare(query).bind(id).first();
                    if (!record) {
                        return new Response(
    JSON.stringify({ ok: false, message: `hydrate_model: Record not found`, status: 404 }),
    { status: 404, headers: { "Content-Type": "application/json" } }
);
                    }
                }
                catch (e) {
                    return new Response(
    JSON.stringify({ ok: false, message: `hydrate_model: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
                }
                const instance = Object.assign(new ExampleModel(), record);
            
                
            try {
                return new Response(
    JSON.stringify(await instance.get_description(env.DB)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
increment_rating: async (id: number, request: Request, env: Env) => {
                
                if (request.method !== "PATCH") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    let body;
                    try {
                        body = await request.json();
                    } catch {
                        return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
);
                    }
                    let {amount} = body;
                    
if ((amount == null || typeof amount !== "number")) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
                
                const d1 = env.DB;
                const query = "SELECT * FROM ExampleModel WHERE id = ?";
                let record;
                try {
                    record = await d1.prepare(query).bind(id).first();
                    if (!record) {
                        return new Response(
    JSON.stringify({ ok: false, message: `hydrate_model: Record not found`, status: 404 }),
    { status: 404, headers: { "Content-Type": "application/json" } }
);
                    }
                }
                catch (e) {
                    return new Response(
    JSON.stringify({ ok: false, message: `hydrate_model: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
                }
                const instance = Object.assign(new ExampleModel(), record);
            
                
            try {
                return new Response(
    JSON.stringify(await instance.increment_rating(env.DB, amount)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            }},
create_example: async (request: Request, env: Env) => {
                
                if (request.method !== "POST") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    let body;
                    try {
                        body = await request.json();
                    } catch {
                        return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
);
                    }
                    let {payload} = body;
                    
if ((payload == null || !$.ExampleModel.validate(payload))) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
payload = Object.assign(new ExampleModel(), payload)
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.create_example(env.DB, payload)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
delete_example: async (request: Request, env: Env) => {
                
                if (request.method !== "DELETE") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    let body;
                    try {
                        body = await request.json();
                    } catch {
                        return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
);
                    }
                    let {id} = body;
                    
if ((id == null || typeof id !== "number")) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.delete_example(env.DB, id)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
list_examples: async (request: Request, env: Env) => {
                
                if (request.method !== "GET") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.list_examples(env.DB)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
patch_example: async (request: Request, env: Env) => {
                
                if (request.method !== "PATCH") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    let body;
                    try {
                        body = await request.json();
                    } catch {
                        return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
);
                    }
                    let {description} = body;
                    
if ((description == undefined || typeof description !== "string")) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.patch_example(env.DB, description)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
process_model: async (request: Request, env: Env) => {
                
                if (request.method !== "POST") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    let body;
                    try {
                        body = await request.json();
                    } catch {
                        return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
);
                    }
                    let {model} = body;
                    
if ((model == null || !$.ExampleModel.validate(model))) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
model = Object.assign(new ExampleModel(), model)
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.process_model(env.DB, model)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
process_models: async (request: Request, env: Env) => {
                
                if (request.method !== "POST") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    let body;
                    try {
                        body = await request.json();
                    } catch {
                        return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
);
                    }
                    let {models} = body;
                    
if ((models == null || !Array.isArray(models) || models.some(item => (item == null || !$.ExampleModel.validate(item))))) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
models = models.map(item => Object.assign(new ExampleModel(), item))
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.process_models(env.DB, models)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
read_example: async (request: Request, env: Env) => {
                
                if (request.method !== "GET") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    const url = new URL(request.url);
                    let {id} = Object.fromEntries(url.searchParams.entries());
                    
if ((id == undefined || typeof id !== "number")) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.read_example(env.DB, id)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            },
update_example: async (request: Request, env: Env) => {
                
                if (request.method !== "PUT") {
                    return new Response(
    JSON.stringify({ ok: false, message: `validate_http: Method Not Allowed`, status: 405 }),
    { status: 405, headers: { "Content-Type": "application/json" } }
);
                }
            
                
                    let body;
                    try {
                        body = await request.json();
                    } catch {
                        return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
);
                    }
                    let {id, rating} = body;
                    
if ((id == null || typeof id !== "number")) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
if ((rating == undefined || typeof rating !== "number")) { return new Response(
    JSON.stringify({ ok: false, message: `validate_req_body: Invalid Request Body`, status: 400 }),
    { status: 400, headers: { "Content-Type": "application/json" } }
); }
                
                
            try {
                return new Response(
    JSON.stringify(await ExampleModel.update_example(env.DB, id, rating)),
    { status: 200, headers: { "Content-Type": "application/json" } }
);
            }
            catch (e) {
                return new Response(
    JSON.stringify({ ok: false, message: `dispatch_method: ${e instanceof Error ? e.message : String(e)}`, status: 500 }),
    { status: 500, headers: { "Content-Type": "application/json" } }
);
            }
        
            }}}}
        
export default {
    async fetch(request: Request, env: Env, ctx: any): Promise<Response> {
        const url = new URL(request.url);
        return await match(router, url.pathname, request, env);
    }
};
