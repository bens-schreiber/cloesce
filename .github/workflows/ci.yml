name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_HOME: ${{ github.workspace }}/.cargo
  RUSTUP_HOME: ${{ github.workspace }}/.rustup

jobs:
  ci:
    name: Check & Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      # --- Rust Setup ---
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      # Cache Cargo registry and build artifacts
      - uses: actions/cache@v3
        with:
          path: |
            ${{ env.CARGO_HOME }}/registry
            ${{ env.CARGO_HOME }}/git
            src/runtime/target
            src/generator/target
          key: cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: rustup target add wasm32-unknown-unknown

      # --- Build Rust projects with Clippy & Format check ---
      - name: Check & Build WASM Runtime
        working-directory: src/runtime
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo build --target wasm32-unknown-unknown --release
          cargo test

      - name: Check & Build Rust Generator
        working-directory: src/generator
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo build --release
          cargo test

      # --- Node Setup ---
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Cache npm modules
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}

      # --- Frontend Build & Checks ---
      - name: Frontend Build & Checks
        working-directory: src/frontend/ts
        run: |
          npm ci
          npm run format -- --check
          npm run typecheck
          npm run build
          npm test

      # --- Integration Tests ---
      - name: Regression Tests
        working-directory: tests/runner
        run: cargo run --bin test regression --check

      - name: Run-Fail
        working-directory: tests/runner
        run: cargo run --bin test run-fail --check

      # --- E2E Tests ---
      - name: E2E Tests
        working-directory: tests/e2e
        run: |
          npm install
          npm run build
          npm run format -- --check
          npm test
