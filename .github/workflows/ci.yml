name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_HOME: ${{ github.workspace }}/.cargo
  RUSTUP_HOME: ${{ github.workspace }}/.rustup

jobs:
  rust-build:
    name: Rust Build
    runs-on: ubuntu-latest
    outputs:
      rust-target-path: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      # Rust setup
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      # Cache Cargo registry
      - uses: actions/cache@v3
        with:
          path: |
            ${{ env.CARGO_HOME }}/registry
            ${{ env.CARGO_HOME }}/git
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      # Cache Cargo build
      - uses: actions/cache@v3
        with:
          path: target
          key: cargo-build-${{ hashFiles('**/Cargo.lock') }}

      # Lints & tests for generator
      - run: cargo fmt --all -- --check
        working-directory: src/generator
      - run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: src/generator
      - run: cargo build --all-targets
        working-directory: src/generator
      - run: cargo test --all
        working-directory: src/generator

      # Lints & tests for runtime
      - run: cargo fmt --all -- --check
        working-directory: src/runtime
      - run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: src/runtime
      - run: cargo build --all-targets
        working-directory: src/runtime
      - run: cargo test --all
        working-directory: src/runtime

      # Build Rust runtime for frontend-ts
      - run: cargo build --target wasm32-unknown-unknown --release
        working-directory: src/runtime

      # Upload Rust artifacts
      - name: Upload Rust artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: rust-target-${{ github.run_id }}
          path: target

  frontend-ts:
    name: Frontend TypeScript
    runs-on: ubuntu-latest
    needs: rust-build
    defaults:
      run:
        working-directory: src/frontend/ts
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Cache npm modules
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}

      # Download Rust artifacts
      - uses: actions/download-artifact@v4
        with:
          name: rust-target-${{ needs.rust-build.outputs.rust-target-path }}
          path: target

      # Frontend build
      - run: npm ci
      - run: npm run format
      - run: npm run typecheck
      - run: npm run build
      - run: npm test

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: frontend-ts
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Download Rust artifacts
      - uses: actions/download-artifact@v4
        with:
          name: rust-target-${{ needs.rust-build.outputs.rust-target-path }}
          path: target

      - name: Build frontend-ts
        working-directory: src/frontend/ts
        run: |
          npm ci
          npm run build

      - name: Run regression tests
        working-directory: tests/runner
        run: cargo run --bin test regression --check

      - name: Run extractor run-fail
        working-directory: tests/runner
        run: cargo run --bin test run-fail --check

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: frontend-ts
    defaults:
      run:
        working-directory: tests/e2e
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Build frontend-ts
      - name: Build frontend-ts
        working-directory: src/frontend/ts
        run: |
          npm ci
          npm run build

      - run: npm ci
      - run: npm run format -- --check
      - run: npm test
